{"timestamp": "2025-06-18T10:55:19", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. MULTIPLY7.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 J         PIC 9 VALUE 1.\n01 RESULT    PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM VARYING J FROM 1 BY 1 UNTIL J > 9\n        COMPUTE RESULT = 7 * J\n        DISPLAY \"7 * \" J \" = \" RESULT\n    END-PERFORM.\n    EXIT PROGRAM.", "output": "# 변환 중 오류 발생: Error code: 404 - {'error': {'code': 'DeploymentNotFound', 'message': 'The API deployment for this resource does not exist. If you created the deployment within the last 5 minutes, please wait a moment and try again.'}}", "lang": "python"}
{"timestamp": "2025-06-18T10:56:34", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. MULTIPLY7.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 J         PIC 9 VALUE 1.\n01 RESULT    PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM VARYING J FROM 1 BY 1 UNTIL J > 9\n        COMPUTE RESULT = 7 * J\n        DISPLAY \"7 * \" J \" = \" RESULT\n    END-PERFORM.\n    EXIT PROGRAM.", "output": "# 변환 중 오류 발생: Error code: 404 - {'error': {'code': 'DeploymentNotFound', 'message': 'The API deployment for this resource does not exist. If you created the deployment within the last 5 minutes, please wait a moment and try again.'}}", "lang": "python"}
{"timestamp": "2025-06-18T11:00:23", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. MULTIPLY7.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 J         PIC 9 VALUE 1.\n01 RESULT    PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM VARYING J FROM 1 BY 1 UNTIL J > 9\n        COMPUTE RESULT = 7 * J\n        DISPLAY \"7 * \" J \" = \" RESULT\n    END-PERFORM.\n    EXIT PROGRAM.", "output": "# 변환 중 오류 발생: Error code: 404 - {'error': {'code': 'DeploymentNotFound', 'message': 'The API deployment for this resource does not exist. If you created the deployment within the last 5 minutes, please wait a moment and try again.'}}", "lang": "python"}
{"timestamp": "2025-06-18T11:01:32", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. MULTIPLY7.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 J         PIC 9 VALUE 1.\n01 RESULT    PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM VARYING J FROM 1 BY 1 UNTIL J > 9\n        COMPUTE RESULT = 7 * J\n        DISPLAY \"7 * \" J \" = \" RESULT\n    END-PERFORM.\n    EXIT PROGRAM.", "output": "# 변환 중 오류 발생: Error code: 404 - {'error': {'code': 'DeploymentNotFound', 'message': 'The API deployment for this resource does not exist. If you created the deployment within the last 5 minutes, please wait a moment and try again.'}}", "lang": "python"}
{"timestamp": "2025-06-18T12:39:15", "input": "오늘 몇일이야 ?", "output": "COBOL 코드의 \"오늘 몇일이야?\"라는 질문은 날짜를 출력하는 간단한 기능을 수행하는 것으로 보입니다. 이를 Python으로 변환하면 다음과 같이 작성할 수 있습니다.\n\n```python\nfrom datetime import datetime\n\ndef main():\n    today = datetime.now()\n    print(f\"오늘 날짜는 {today.strftime('%Y-%m-%d')}입니다.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 현재 날짜를 가져", "lang": "python"}
{"timestamp": "2025-06-18T13:14:05", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. GUGUDAN-TWO.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I               PIC 9 VALUE 1.\n01 RESULT          PIC 99.\n\nPROCEDURE DIVISION.\nDISPLAY \"=== 구구단 2단 ===\".\nPERFORM UNTIL I > 9\n    COMPUTE RESULT = 2 * I\n    DISPLAY \"2 x \" I \" = \" RESULT\n    ADD 1 TO I\nEND-PERFORM.\nSTOP RUN.", "output": "다음은 주어진 COBOL 코드를 `./batch_output` 코드로 변환한 것입니다.\n\n```bash\n#!/bin/bash\n\necho \"=== 구구단 2단 ===\"\n\nfor I in {1..9}\ndo\n    RESULT=$((2 * I))\n    echo \"2 x $I = $RESULT\"\ndone\n```\n\n이 스크립트는 구구단 2단을 출력하는 기능을 수행합니다. `for` 루프를 사용하여", "lang": "./batch_output", "filename": "services\\cobol-to-python-2x2.cbl"}
{"timestamp": "2025-06-18T13:14:06", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO.\nPROCEDURE DIVISION.\n    DISPLAY 'HELLO, WORLD!'.\n    STOP RUN.", "output": "아래는 요청하신 COBOL 코드를 `./batch_output` 형식으로 변환한 코드입니다. 가독성을 고려하여 작성하였습니다.\n\n```bash\n#!/bin/bash\n\n# Hello World 출력 배치 스크립트\necho \"HELLO, WORLD!\"\n```\n\n이 스크립트는 Bash 쉘에서 실행할 수 있으며, \"HELLO, WORLD!\"라는 메시지를 출력합니다.", "lang": "./batch_output", "filename": "services\\cobol-to-python.cbl"}
{"timestamp": "2025-06-18T13:15:03", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. GUGUDAN-TWO.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I               PIC 9 VALUE 1.\n01 RESULT          PIC 99.\n\nPROCEDURE DIVISION.\nDISPLAY \"=== 구구단 2단 ===\".\nPERFORM UNTIL I > 9\n    COMPUTE RESULT = 2 * I\n    DISPLAY \"2 x \" I \" = \" RESULT\n    ADD 1 TO I\nEND-PERFORM.\nSTOP RUN.", "output": "다음은 COBOL 코드를 `./batch_output` 형식으로 변환한 예시입니다. 가독성을 높이고 주석을 최소화하였습니다.\n\n```bash\n#!/bin/bash\n\necho \"=== 구구단 2단 ===\"\n\nfor (( i=1; i<=9; i++ )); do\n    result=$(( 2 * i ))\n    echo \"2 x $i = $result\"\ndone\n```\n\n이 스크립트는 Bash", "lang": "./batch_output", "filename": "services\\cobol-to-python-2x2.cbl"}
{"timestamp": "2025-06-18T13:15:04", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO.\nPROCEDURE DIVISION.\n    DISPLAY 'HELLO, WORLD!'.\n    STOP RUN.", "output": "다음은 COBOL 코드를 `./batch_output` 형식으로 변환한 예입니다. 주석을 최소화하고 가독성을 고려하여 작성하였습니다.\n\n```bash\n#!/bin/bash\n\n# Hello World 배치 스크립트\necho 'HELLO, WORLD!'\n```\n\n이 스크립트는 실행 시 \"HELLO, WORLD!\"를 출력합니다. `#!/bin/bash`는 이 스크립트가 Bash 셸에서 실행되어야 함", "lang": "./batch_output", "filename": "services\\cobol-to-python.cbl"}
{"timestamp": "2025-06-18T13:20:30", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. GUGUDAN-TWO.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I               PIC 9 VALUE 1.\n01 RESULT          PIC 99.\n\nPROCEDURE DIVISION.\nDISPLAY \"=== 구구단 2단 ===\".\nPERFORM UNTIL I > 9\n    COMPUTE RESULT = 2 * I\n    DISPLAY \"2 x \" I \" = \" RESULT\n    ADD 1 TO I\nEND-PERFORM.\nSTOP RUN.", "output": "다음은 COBOL 코드를 Python으로 변환한 예제입니다.\n\n```python\ndef gugudan_two():\n    print(\"=== 구구단 2단 ===\")\n    i = 1\n\n    while i <= 9:\n        result = 2 * i\n        print(f\"2 x {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    gugudan_two()\n```\n\n이 코드는 구구단 2단", "lang": "python", "filename": "services\\cobol-to-python-2x2.cbl"}
{"timestamp": "2025-06-18T13:20:31", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO.\nPROCEDURE DIVISION.\n    DISPLAY 'HELLO, WORLD!'.\n    STOP RUN.", "output": "다음은 주어진 COBOL 코드를 Python으로 변환한 것입니다.\n\n```python\ndef main():\n    print(\"HELLO, WORLD!\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 Python 코드는 `HELLO, WORLD!`를 출력하고, 프로그램이 실행되도록 구성되어 있습니다.", "lang": "python", "filename": "services\\cobol-to-python.cbl"}
{"timestamp": "2025-06-18T13:24:12", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. GUGUDAN-TWO.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I               PIC 9 VALUE 1.\n01 RESULT          PIC 99.\n\nPROCEDURE DIVISION.\nDISPLAY \"=== 구구단 2단 ===\".\nPERFORM UNTIL I > 9\n    COMPUTE RESULT = 2 * I\n    DISPLAY \"2 x \" I \" = \" RESULT\n    ADD 1 TO I\nEND-PERFORM.\nSTOP RUN.", "output": "다음은 주어진 COBOL 코드를 Python 코드로 변환한 것입니다.\n\n```python\ndef gugudan_two():\n    i = 1\n    print(\"=== 구구단 2단 ===\")\n    while i <= 9:\n        result = 2 * i\n        print(f\"2 x {i} = {result}\")\n        i += 1\n\ngugudan_two()\n```\n\n이 코드는 COBOL의 구구단 2단을 Python으로 구현", "lang": "python", "filename": "services\\cobol-to-python-2x2.cbl"}
{"timestamp": "2025-06-18T13:24:12", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO.\nPROCEDURE DIVISION.\n    DISPLAY 'HELLO, WORLD!'.\n    STOP RUN.", "output": "다음은 주어진 COBOL 코드를 Python으로 변환한 코드입니다:\n\n```python\ndef main():\n    print(\"HELLO, WORLD!\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 COBOL 프로그램과 같은 기능을 수행하며, \"HELLO, WORLD!\"를 출력합니다.", "lang": "python", "filename": "services\\cobol-to-python.cbl"}
{"timestamp": "2025-06-18T13:28:45", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. GUGUDAN-TWO.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I               PIC 9 VALUE 1.\n01 RESULT          PIC 99.\n\nPROCEDURE DIVISION.\nDISPLAY \"=== 구구단 2단 ===\".\nPERFORM UNTIL I > 9\n    COMPUTE RESULT = 2 * I\n    DISPLAY \"2 x \" I \" = \" RESULT\n    ADD 1 TO I\nEND-PERFORM.\nSTOP RUN.", "output": "아래는 주어진 COBOL 코드를 Python 코드로 변환한 것입니다.\n\n```python\ni = 1\n\nprint(\"=== 구구단 2단 ===\")\nwhile i <= 9:\n    result = 2 * i\n    print(f\"2 x {i} = {result}\")\n    i += 1\n``` \n\n이 코드는 COBOL의 기능을 그대로 반영하여 2단 구구단을 출력합니다. 가독성을 높이기 위해", "lang": "python", "filename": "services\\cobol-to-python-2x2.cbl"}
{"timestamp": "2025-06-18T13:28:46", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO.\nPROCEDURE DIVISION.\n    DISPLAY 'HELLO, WORLD!'.\n    STOP RUN.", "output": "아래는 주어진 COBOL 코드를 Python으로 변환한 예입니다.\n\n```python\ndef main():\n    print(\"HELLO, WORLD!\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 COBOL 프로그램의 기능을 그대로 유지하며, Python의 기본 구조를 따릅니다.", "lang": "python", "filename": "services\\cobol-to-python.cbl"}
{"timestamp": "2025-06-18T13:34:50", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. MULTIPLY7.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 J         PIC 9 VALUE 1.\n01 RESULT    PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM VARYING J FROM 1 BY 1 UNTIL J > 9\n        COMPUTE RESULT = 99 * J\n        DISPLAY \"99 * \" J \" = \" RESULT\n    END-PERFORM.\n    EXIT PROGRAM.", "output": "다음은 제공된 COBOL 코드를 Python 코드로 변환한 것입니다:\n\n```python\nfor j in range(1, 10):\n    result = 99 * j\n    print(f\"99 * {j} = {result}\")\n```\n\n이 코드는 COBOL 코드의 기능을 그대로 유지하면서 Python의 문법으로 작성되었습니다. `for` 루프를 사용하여 1부터 9까지 반복하고, 각 반복에서 결과를 계산한 후 출력합니다", "lang": "python"}
{"timestamp": "2025-06-18T13:41:16", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN2.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 2 * I\n               DISPLAY \"2 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN2.\n", "output": "아래는 제공된 COBOL 코드를 Python으로 변환한 것입니다.\n\n```python\ndef main():\n    i = 1\n    while i <= 9:\n        result = 2 * i\n        print(f\"2 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 Python 코드는 COBOL 코드의 논리를 그대로 유지하면서 가독성을 높이고, Python의 문법에 맞", "lang": "python", "filename": "test-a\\DAN2.cob"}
{"timestamp": "2025-06-18T13:41:17", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN3.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 3 * I\n               DISPLAY \"3 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN3.\n", "output": "다음은 COBOL 코드를 Python으로 변환한 것입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 3 * i\n    print(f\"3 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL 프로그램의 기능을 그대로 유지하면서 Python의 문법에 맞게 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN3.cob"}
{"timestamp": "2025-06-18T13:41:18", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN4.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 4 * I\n               DISPLAY \"4 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN4.\n", "output": "아래는 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 4 * i\n    print(f\"4 * {i} = {result}\")\n    i += 1\n```\n\n이 Python 코드는 COBOL 코드의 기능을 그대로 구현하며, 가독성을 위해 f-string을 사용하여 출력 형식을 맞췄습니다.", "lang": "python", "filename": "test-a\\DAN4.cob"}
{"timestamp": "2025-06-18T13:41:19", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN5.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 5 * I\n               DISPLAY \"5 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN5.\n", "output": "아래는 주어진 COBOL 코드를 Python 코드로 변환한 것입니다.\n\n```python\ndef main():\n    i = 1\n    while i <= 9:\n        result = 5 * i\n        print(f\"5 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 Python 코드는 COBOL 코드의 로직을 그대로 유지하면서 가독성을 높였습니다. `main` 함수", "lang": "python", "filename": "test-a\\DAN5.cob"}
{"timestamp": "2025-06-18T13:41:20", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN6.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 6 * I\n               DISPLAY \"6 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN6.\n", "output": "다음은 주어진 COBOL 코드를 Python 코드로 변환한 것입니다:\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 6 * i\n    print(f\"6 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL의 로직을 그대로 유지하면서 Python의 문법에 맞게 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN6.cob"}
{"timestamp": "2025-06-18T13:41:21", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN7.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 7 * I\n               DISPLAY \"7 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN7.\n", "output": "아래는 주어진 COBOL 코드를 Python 코드로 변환한 것입니다. 가독성을 고려하여 작성하였습니다.\n\n```python\ndef dan7():\n    i = 1\n\n    while i <= 9:\n        result = 7 * i\n        print(f\"7 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    dan7()\n```\n\n이 코드는 COBOL 프로그램의 기능을 동일하게 수행하며", "lang": "python", "filename": "test-a\\DAN7.cob"}
{"timestamp": "2025-06-18T13:41:22", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN8.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 8 * I\n               DISPLAY \"8 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN8.\n", "output": "아래는 제공된 COBOL 코드를 Python으로 변환한 코드입니다. 가독성을 고려하여 작성하였습니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 8 * i\n    print(f\"8 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL에서 반복문을 사용하여 1부터 9까지의 수에 8을 곱한 결과를 출력하는 기능", "lang": "python", "filename": "test-a\\DAN8.cob"}
{"timestamp": "2025-06-18T13:41:23", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN9.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 9 * I\n               DISPLAY \"9 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN9.\n", "output": "아래는 제공된 COBOL 코드를 Python 코드로 변환한 것입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 9 * i\n    print(f\"9 * {i} = {result}\")\n    i += 1\n``` \n\n이 코드는 COBOL의 로직을 그대로 유지하면서 Python의 문법에 맞게 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN9.cob"}
{"timestamp": "2025-06-18T13:41:24", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAIN.\n\n       PROCEDURE DIVISION.\n           CALL 'DAN2'\n           CALL 'DAN3'\n           CALL 'DAN4'\n           CALL 'DAN5'\n           CALL 'DAN6'\n           CALL 'DAN7'\n           CALL 'DAN8'\n           CALL 'DAN9'\n           STOP RUN.\n       END PROGRAM MAIN.\n", "output": "다음은 COBOL 코드를 Python 코드로 변환한 예입니다:\n\n```python\ndef main():\n    dan_functions = [dan2, dan3, dan4, dan5, dan6, dan7, dan8, dan9]\n    \n    for func in dan_functions:\n        func()\n        \ndef dan2():\n    pass  # DAN2의 구현\n\ndef dan3():\n    pass  # DAN3의 구현\n\ndef dan4():\n    pass  # DAN4의", "lang": "python", "filename": "test-b\\MAIN.cob"}
{"timestamp": "2025-06-18T13:46:50", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN2.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 2 * I\n               DISPLAY \"2 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN2.\n", "output": "아래는 주어진 COBOL 코드를 Python 코드로 변환한 것입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 2 * i\n    print(f\"2 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL 프로그램의 기능을 그대로 구현하며, 가독성을 고려하여 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN2.cob"}
{"timestamp": "2025-06-18T13:46:51", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN3.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 3 * I\n               DISPLAY \"3 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN3.\n", "output": "다음은 COBOL 코드를 Python 코드로 변환한 것입니다:\n\n```python\ndef main():\n    i = 1\n    \n    while i <= 9:\n        result = 3 * i\n        print(f\"3 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 COBOL 프로그램의 동작을 Python으로 구현한 것으로, 1부터 9까지의 숫자에", "lang": "python", "filename": "test-a\\DAN3.cob"}
{"timestamp": "2025-06-18T13:46:52", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN4.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 4 * I\n               DISPLAY \"4 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN4.\n", "output": "아래는 제공된 COBOL 코드를 Python 코드로 변환한 것입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 4 * i\n    print(f\"4 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL 프로그램의 기능을 그대로 유지하면서 Python의 문법에 맞게 작성되었습니다. `while` 루프를 사용하여 `i`가 9보다 작거나 같은", "lang": "python", "filename": "test-a\\DAN4.cob"}
{"timestamp": "2025-06-18T13:46:54", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN5.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 5 * I\n               DISPLAY \"5 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN5.\n", "output": "아래는 제공된 COBOL 코드를 Python으로 변환한 코드입니다. 가독성을 고려하여 작성하였습니다.\n\n```python\ndef main():\n    i = 1\n    \n    while i <= 9:\n        result = 5 * i\n        print(f\"5 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 COBOL 프로그램의 기능을 Python으로 동일하게 구현하며", "lang": "python", "filename": "test-a\\DAN5.cob"}
{"timestamp": "2025-06-18T13:46:55", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN6.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 6 * I\n               DISPLAY \"6 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN6.\n", "output": "다음은 주어진 COBOL 코드를 Python 코드로 변환한 것입니다.\n\n```python\ndef main():\n    i = 1\n    while i <= 9:\n        result = 6 * i\n        print(f\"6 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 COBOL 프로그램과 동일한 기능을 수행하며, 1부터 9까지의 숫자에", "lang": "python", "filename": "test-a\\DAN6.cob"}
{"timestamp": "2025-06-18T13:46:56", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN7.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 7 * I\n               DISPLAY \"7 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN7.\n", "output": "다음은 COBOL 코드를 Python으로 변환한 것입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 7 * i\n    print(f\"7 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL의 반복 구조를 Python의 `while` 루프를 사용하여 구현하였으며, 결과를 출력하는 방식도 Python의 `print` 함수를 사용하여 간결하게 작성", "lang": "python", "filename": "test-a\\DAN7.cob"}
{"timestamp": "2025-06-18T13:46:57", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN8.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 8 * I\n               DISPLAY \"8 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN8.\n", "output": "아래는 COBOL 코드를 Python으로 변환한 예제입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 8 * i\n    print(f\"8 * {i} = {result}\")\n    i += 1\n``` \n\n이 코드는 COBOL의 기능을 그대로 Python 문법에 맞춰 변환하였으며, 가독성을 고려하여 포맷 문자열을 사용했습니다.", "lang": "python", "filename": "test-a\\DAN8.cob"}
{"timestamp": "2025-06-18T13:46:59", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN9.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 9 * I\n               DISPLAY \"9 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN9.\n", "output": "아래는 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 9 * i\n    print(f\"9 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL의 로직을 Python 문법에 맞게 변환하였으며, 가독성을 고려하여 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN9.cob"}
{"timestamp": "2025-06-18T13:47:00", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAIN.\n\n       PROCEDURE DIVISION.\n           CALL 'DAN2'\n           CALL 'DAN3'\n           CALL 'DAN4'\n           CALL 'DAN5'\n           CALL 'DAN6'\n           CALL 'DAN7'\n           CALL 'DAN8'\n           CALL 'DAN9'\n           STOP RUN.\n       END PROGRAM MAIN.\n", "output": "다음은 제공된 COBOL 코드를 Python 코드로 변환한 것입니다.\n\n```python\ndef main():\n    dan_functions = [dan2, dan3, dan4, dan5, dan6, dan7, dan8, dan9]\n    \n    for func in dan_functions:\n        func()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드에서 `dan2`, `dan3`, `dan4`, `dan5`, `dan6`, `", "lang": "python", "filename": "test-b\\MAIN.cob"}
{"timestamp": "2025-06-18T13:51:09", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN2.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 2 * I\n               DISPLAY \"2 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN2.\n", "output": "다음은 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\nI = 1\n\nwhile I <= 9:\n    RESULT = 2 * I\n    print(f\"2 * {I} = {RESULT}\")\n    I += 1\n```\n\n이 Python 코드는 COBOL 코드의 기능을 그대로 재현하며, 가독성을 고려하여 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN2.cob"}
{"timestamp": "2025-06-18T13:51:12", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN3.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 3 * I\n               DISPLAY \"3 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN3.\n", "output": "다음은 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 3 * i\n    print(f\"3 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL의 반복문과 계산을 Python의 `while` 루프와 문자열 포매팅으로 변환한 것입니다. 가독성을 고려하여 적절한 변수명과", "lang": "python", "filename": "test-a\\DAN3.cob"}
{"timestamp": "2025-06-18T13:51:13", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN4.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 4 * I\n               DISPLAY \"4 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN4.\n", "output": "다음은 COBOL 코드를 Python으로 변환한 예제입니다. \n\n```python\ndef main():\n    i = 1\n    \n    while i <= 9:\n        result = 4 * i\n        print(f\"4 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 COBOL 프로그램과 동일한 기능을 수행하며, 가독성을 고려하여 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN4.cob"}
{"timestamp": "2025-06-18T13:51:14", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN5.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 5 * I\n               DISPLAY \"5 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN5.\n", "output": "다음은 COBOL 코드를 Python으로 변환한 것입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 5 * i\n    print(f\"5 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL의 로직을 그대로 유지하면서 Python의 문법에 맞게 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN5.cob"}
{"timestamp": "2025-06-18T13:51:15", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN6.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 6 * I\n               DISPLAY \"6 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN6.\n", "output": "다음은 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 6 * i\n    print(f\"6 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL의 로직을 그대로 반영하여 1부터 9까지의 값을 이용해 6을 곱한 결과를 출력합니다.", "lang": "python", "filename": "test-a\\DAN6.cob"}
{"timestamp": "2025-06-18T13:51:16", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN7.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 7 * I\n               DISPLAY \"7 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN7.\n", "output": "다음은 주어진 COBOL 코드를 Python 코드로 변환한 것입니다:\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 7 * i\n    print(f\"7 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL 프로그램의 동작을 그대로 반영하며, 가독성을 고려하여 작성했습니다.", "lang": "python", "filename": "test-a\\DAN7.cob"}
{"timestamp": "2025-06-18T13:51:18", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN8.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 8 * I\n               DISPLAY \"8 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN8.\n", "output": "다음은 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ndef main():\n    i = 1\n    while i <= 9:\n        result = 8 * i\n        print(f\"8 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n``` \n\n이 코드는 COBOL 코드의 기능을 그대로 유지하면서 Python 문법에 맞게 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN8.cob"}
{"timestamp": "2025-06-18T13:51:19", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN9.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 9 * I\n               DISPLAY \"9 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN9.\n", "output": "다음은 주어진 COBOL 코드를 Python 코드로 변환한 예입니다.\n\n```python\ndef main():\n    i = 1\n\n    while i <= 9:\n        result = 9 * i\n        print(f\"9 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 COBOL의 반복문과 계산 로직을 Python의 `while` 루프와 계산식", "lang": "python", "filename": "test-a\\DAN9.cob"}
{"timestamp": "2025-06-18T13:51:20", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAIN.\n\n       PROCEDURE DIVISION.\n           CALL 'DAN2'\n           CALL 'DAN3'\n           CALL 'DAN4'\n           CALL 'DAN5'\n           CALL 'DAN6'\n           CALL 'DAN7'\n           CALL 'DAN8'\n           CALL 'DAN9'\n           STOP RUN.\n       END PROGRAM MAIN.\n", "output": "다음은 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ndef main():\n    dan2()\n    dan3()\n    dan4()\n    dan5()\n    dan6()\n    dan7()\n    dan8()\n    dan9()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n각 호출된 함수(`dan2`, `dan3`, 등)는 별도로 정의해야 합니다. 필요에 따라 함수 구현을 추가하세요.", "lang": "python", "filename": "test-b\\MAIN.cob"}
{"timestamp": "2025-06-18T14:14:56", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN2.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 2 * I\n               DISPLAY \"2 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN2.\n", "output": "다음은 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ndef main():\n    i = 1\n    while i <= 9:\n        result = 2 * i\n        print(f\"2 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 COBOL 프로그램과 동일한 기능을 수행하며, 가독성이 좋도록 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN2.cob"}
{"timestamp": "2025-06-18T14:14:57", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN3.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 3 * I\n               DISPLAY \"3 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN3.\n", "output": "아래는 COBOL 코드를 파이썬으로 변환한 코드입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 3 * i\n    print(f\"3 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL의 기능을 그대로 유지하면서 가독성을 높였습니다.", "lang": "python", "filename": "test-a\\DAN3.cob"}
{"timestamp": "2025-06-18T14:14:58", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN4.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 4 * I\n               DISPLAY \"4 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN4.\n", "output": "아래는 COBOL 코드를 Python으로 변환한 것입니다. 가독성을 고려하여 작성하였습니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 4 * i\n    print(f\"4 * {i} = {result}\")\n    i += 1\n``` \n\n이 코드는 COBOL의 반복문과 계산을 Python의 `while` 루프와 `print` 함수로 표현하였습니다.", "lang": "python", "filename": "test-a\\DAN4.cob"}
{"timestamp": "2025-06-18T14:14:59", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN5.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 5 * I\n               DISPLAY \"5 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN5.\n", "output": "다음은 COBOL 코드를 Python으로 변환한 것입니다:\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 5 * i\n    print(f\"5 * {i} = {result}\")\n    i += 1\n```\n\n이 Python 코드는 COBOL 프로그램의 로직을 그대로 반영하고 있으며, 가독성을 고려하여 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN5.cob"}
{"timestamp": "2025-06-18T14:14:59", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN6.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 6 * I\n               DISPLAY \"6 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN6.\n", "output": "아래는 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ni = 1\n\nwhile i <= 9:\n    result = 6 * i\n    print(f\"6 * {i} = {result}\")\n    i += 1\n```\n\n이 코드는 COBOL의 반복 구조와 계산을 Python의 while 루프와 f-string을 사용하여 간결하게 표현하고 있습니다.", "lang": "python", "filename": "test-a\\DAN6.cob"}
{"timestamp": "2025-06-18T14:15:00", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN7.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 7 * I\n               DISPLAY \"7 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN7.\n", "output": "다음은 COBOL 코드를 Python으로 변환한 것입니다. 가독성을 고려하여 작성했습니다.\n\n```python\ndef main():\n    i = 1\n    while i <= 9:\n        result = 7 * i\n        print(f\"7 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 Python 코드는 COBOL 프로그램의 기능을 동일하게 구현하며, 1부터", "lang": "python", "filename": "test-a\\DAN7.cob"}
{"timestamp": "2025-06-18T14:15:02", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN8.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 8 * I\n               DISPLAY \"8 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN8.\n", "output": "다음은 COBOL 코드를 Python 코드로 변환한 예입니다.\n\n```python\ndef main():\n    i = 1\n    while i <= 9:\n        result = 8 * i\n        print(f\"8 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n``` \n\n이 코드는 COBOL 프로그램의 기능을 Python으로 재구현한 것으로, 1부터 9까지의 숫", "lang": "python", "filename": "test-a\\DAN8.cob"}
{"timestamp": "2025-06-18T14:15:03", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN9.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 9 * I\n               DISPLAY \"9 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN9.\n", "output": "아래는 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ndef main():\n    i = 1\n    while i <= 9:\n        result = 9 * i\n        print(f\"9 * {i} = {result}\")\n        i += 1\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 COBOL 프로그램의 기능을 동일하게 수행하며, 가독성을 고려하여 작성되었습니다.", "lang": "python", "filename": "test-a\\DAN9.cob"}
{"timestamp": "2025-06-18T14:15:04", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAIN.\n\n       PROCEDURE DIVISION.\n           CALL 'DAN2'\n           CALL 'DAN3'\n           CALL 'DAN4'\n           CALL 'DAN5'\n           CALL 'DAN6'\n           CALL 'DAN7'\n           CALL 'DAN8'\n           CALL 'DAN9'\n           STOP RUN.\n       END PROGRAM MAIN.\n", "output": "다음은 주어진 COBOL 코드를 Python으로 변환한 코드입니다.\n\n```python\ndef dan2():\n    pass\n\ndef dan3():\n    pass\n\ndef dan4():\n    pass\n\ndef dan5():\n    pass\n\ndef dan6():\n    pass\n\ndef dan7():\n    pass\n\ndef dan8():\n    pass\n\ndef dan9():\n    pass\n\ndef main():\n    dan2()\n    dan3()\n    dan4()\n    dan5()\n    dan6()", "lang": "python", "filename": "test-b\\MAIN.cob"}
{"timestamp": "2025-06-18 14:36:13", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. MAIN.\n\nPROCEDURE DIVISION.\n    CALL 'DAN2'\n    CALL 'DAN3'\n    CALL 'DAN4'\n    CALL 'DAN5'\n    CALL 'DAN6'\n    CALL 'DAN7'\n    CALL 'DAN8'\n    CALL 'DAN9'\n    STOP RUN.\nEND PROGRAM MAIN.", "output": "아래는 COBOL 코드를 Python으로 변환한 예입니다:\n\n```python\ndef main():\n    dan_functions = [dan2, dan3, dan4, dan5, dan6, dan7, dan8, dan9]\n    \n    for func in dan_functions:\n        func()\n\ndef dan2():\n    pass  # DAN2의 로직 구현\n\ndef dan3():\n    pass  # DAN3의 로직 구현\n\ndef dan4():\n    pass  # DAN", "lang": "python"}
