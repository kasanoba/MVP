{"timestamp": "2025-06-19 08:52:21", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. MAIN.\n\nPROCEDURE DIVISION.\n    CALL 'DAN2'\n    CALL 'DAN3'\n    CALL 'DAN4'\n    CALL 'DAN5'\n    CALL 'DAN6'\n    CALL 'DAN7'\n    CALL 'DAN8'\n    CALL 'DAN9'\n    STOP RUN.\nEND PROGRAM MAIN.", "output": "아래는 주어진 COBOL 코드를 Python으로 변환한 코드입니다. 이 코드는 COBOL 프로그램의 기능을 동일하게 수행하며, 가독성을 고려하여 작성되었습니다.\n\n```python\ndef main():\n    call_dan('DAN2')\n    call_dan('DAN3')\n    call_dan('DAN4')\n    call_dan('DAN5')\n    call_dan('DAN6')\n    call_dan('DAN7')\n    call_dan('DAN8')\n    call_dan('DAN9')\n\ndef call_dan(function_name):\n    # 이 부분은 실제 DAN 함수 호출 로직으로 대체되어야 합니다.\n    print(f\"Calling {function_name}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드는 `main` 함수에서 여러 개의 `call_dan` 함수를 호출하여 COBOL의 기능을 재현합니다. `call_dan` 함수는 호출된 함수명을 출력하는 예시로 구현되어 있으며, 실제 로직에 맞게 수정되어야 합니다.", "lang": "python"}
{"timestamp": "2025-06-19 08:56:21", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. MAIN.\n\nPROCEDURE DIVISION.\n    CALL 'DAN2'\n    CALL 'DAN3'\n    CALL 'DAN4'\n    CALL 'DAN5'\n    CALL 'DAN6'\n    CALL 'DAN7'\n    CALL 'DAN8'\n    CALL 'DAN9'\n    STOP RUN.\nEND PROGRAM MAIN.", "output": "# Python 코드로 변환된 결과입니다.\n# COBOL에서 호출된 서브프로그램들을 Python에서도 호출하는 구조로 변환하였습니다.\n\ndef dan2():\n    pass  # DAN2 서브프로그램 구현\n\ndef dan3():\n    pass  # DAN3 서브프로그램 구현\n\ndef dan4():\n    pass  # DAN4 서브프로그램 구현\n\ndef dan5():\n    pass  # DAN5 서브프로그램 구현\n\ndef dan6():\n    pass  # DAN6 서브프로그램 구현\n\ndef dan7():\n    pass  # DAN7 서브프로그램 구현\n\ndef dan8():\n    pass  # DAN8 서브프로그램 구현\n\ndef dan9():\n    pass  # DAN9 서브프로그램 구현\n\n# 메인 프로그램\ndef main():\n    dan2()\n    dan3()\n    dan4()\n    dan5()\n    dan6()\n    dan7()\n    dan8()\n    dan9()\n\n# 프로그램 실행\nif __name__ == \"__main__\":\n    main()  # 메인 함수 호출", "lang": "python"}
{"timestamp": "2025-06-19 09:19:16", "input": "test", "output": "```python\n# COBOL 프로그램을 Python으로 변환한 코드입니다.\n\n# 필요한 라이브러리 임포트\n# 없음\n\n# 메인 함수 정의\ndef main():\n    # 테스트 출력\n    print(\"test\")\n\n# 프로그램 실행\nif __name__ == \"__main__\":\n    main()\n```", "lang": "python"}
{"timestamp": "2025-06-19 09:19:56", "input": "오늘 날씨는\n", "output": "```python\n# COBOL 코드에서 오늘 날씨를 출력하는 기능을 Python으로 변환\n# 오늘 날씨를 변수에 저장하고 출력합니다.\n\ntoday_weather = \"오늘 날씨는\"\nprint(today_weather)\n```", "lang": "python"}
{"timestamp": "2025-06-19 09:22:46", "input": "오늘 날씨는\n", "output": "해당 입력은 COBOL 코드가 아닙니다.", "lang": "python"}
{"timestamp": "2025-06-19 09:23:33", "input": "오늘 날씨는\n", "output": "해당 입력은 COBOL 코드가 아닙니다. COBOL 코드만 변환이 가능합니다.", "lang": "python"}
{"timestamp": "2025-06-19 09:24:17", "input": "오늘 날씨는\n", "output": "해당 입력은 COBOL 코드가 아닙니다. \nCOBOL 코드만 변환이 가능합니다.", "lang": "python"}
{"timestamp": "2025-06-19 10:28:58", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN2.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 2 * I\n               DISPLAY \"2 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN2.\n", "output": "해당 입력은 COBOL 코드가 아닙니다.\nCOBOL 코드만 변환이 가능합니다.", "lang": "python", "filename": "test-a\\DAN2.cob"}
{"timestamp": "2025-06-19 10:28:59", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN3.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 3 * I\n               DISPLAY \"3 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN3.\n", "output": "# 해당 입력은 COBOL 코드가 아닙니다.\n# COBOL 코드만 변환이 가능합니다.", "lang": "python", "filename": "test-a\\DAN3.cob"}
{"timestamp": "2025-06-19 10:28:59", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN4.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 4 * I\n               DISPLAY \"4 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN4.\n", "output": "해당 입력은 COBOL 코드가 아닙니다.\nCOBOL 코드만 변환이 가능합니다.", "lang": "python", "filename": "test-a\\DAN4.cob"}
{"timestamp": "2025-06-19 10:29:00", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN5.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 5 * I\n               DISPLAY \"5 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN5.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 5 * I\n    print(\"5 *\", I, \"=\", RESULT)\n    I += 1", "lang": "python", "filename": "test-a\\DAN5.cob"}
{"timestamp": "2025-06-19 10:29:01", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN6.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 6 * I\n               DISPLAY \"6 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN6.\n", "output": "# COBOL 코드를 Python으로 변환한 결과입니다.\nI = 1\nRESULT = 0\n\nwhile I <= 9:\n    RESULT = 6 * I\n    print(f\"6 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN6.cob"}
{"timestamp": "2025-06-19 10:29:02", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN7.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 7 * I\n               DISPLAY \"7 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN7.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 7 * I\n    print(f\"7 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN7.cob"}
{"timestamp": "2025-06-19 10:29:02", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN8.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 8 * I\n               DISPLAY \"8 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN8.\n", "output": "# 아래는 COBOL 코드를 Python으로 변환한 결과입니다.\nI = 1\nwhile I <= 9:\n    RESULT = 8 * I\n    print(f\"8 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN8.cob"}
{"timestamp": "2025-06-19 10:29:03", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN9.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 9 * I\n               DISPLAY \"9 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN9.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\nI = 1\nwhile I <= 9:\n    RESULT = 9 * I\n    print(f\"9 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN9.cob"}
{"timestamp": "2025-06-19 10:29:04", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAIN.\n\n       PROCEDURE DIVISION.\n           CALL 'DAN2'\n           CALL 'DAN3'\n           CALL 'DAN4'\n           CALL 'DAN5'\n           CALL 'DAN6'\n           CALL 'DAN7'\n           CALL 'DAN8'\n           CALL 'DAN9'\n           STOP RUN.\n       END PROGRAM MAIN.\n", "output": "해당 입력은 COBOL 코드가 아닙니다.\nCOBOL 코드만 변환이 가능합니다.", "lang": "python", "filename": "test-b\\MAIN.cob"}
{"timestamp": "2025-06-19 10:37:33", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN2.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 2 * I\n               DISPLAY \"2 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN2.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 2 * I\n    print(f\"2 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN2.cob"}
{"timestamp": "2025-06-19 10:37:34", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN3.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 3 * I\n               DISPLAY \"3 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN3.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n# 변환된 코드는 다음과 같습니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 3 * I\n    print(f\"3 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN3.cob"}
{"timestamp": "2025-06-19 10:37:35", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN4.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 4 * I\n               DISPLAY \"4 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN4.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\nI = 1\nwhile I <= 9:\n    RESULT = 4 * I\n    print(f\"4 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN4.cob"}
{"timestamp": "2025-06-19 10:37:36", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN5.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 5 * I\n               DISPLAY \"5 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN5.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\nI = 1\nwhile I <= 9:\n    RESULT = 5 * I\n    print(\"5 *\", I, \"=\", RESULT)\n    I += 1", "lang": "python", "filename": "test-a\\DAN5.cob"}
{"timestamp": "2025-06-19 10:37:36", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN6.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 6 * I\n               DISPLAY \"6 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN6.\n", "output": "# COBOL 프로그램을 Python 코드로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 6 * I\n    print(f\"6 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN6.cob"}
{"timestamp": "2025-06-19 10:37:37", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN7.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 7 * I\n               DISPLAY \"7 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN7.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 7 * I\n    print(f\"7 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN7.cob"}
{"timestamp": "2025-06-19 10:37:38", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN8.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 8 * I\n               DISPLAY \"8 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN8.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 8 * I\n    print(f\"8 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN8.cob"}
{"timestamp": "2025-06-19 10:37:39", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN9.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 9 * I\n               DISPLAY \"9 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN9.\n", "output": "# COBOL 프로그램 DAN9을 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 9 * I\n    print(f\"9 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN9.cob"}
{"timestamp": "2025-06-19 10:37:39", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAIN.\n\n       PROCEDURE DIVISION.\n           CALL 'DAN2'\n           CALL 'DAN3'\n           CALL 'DAN4'\n           CALL 'DAN5'\n           CALL 'DAN6'\n           CALL 'DAN7'\n           CALL 'DAN8'\n           CALL 'DAN9'\n           STOP RUN.\n       END PROGRAM MAIN.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\ndef main():\n    dan2()\n    dan3()\n    dan4()\n    dan5()\n    dan6()\n    dan7()\n    dan8()\n    dan9()\n\nif __name__ == \"__main__\":\n    main()", "lang": "python", "filename": "test-b\\MAIN.cob"}
{"timestamp": "2025-06-19 13:09:31", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAIN.\n\n       PROCEDURE DIVISION.\n           DISPLAY \"MAIN START\".\n           CALL 'PAY001'.\n           CALL 'ACC001'.\n           DISPLAY \"MAIN END\".\n           STOP RUN.\n", "output": "// COBOL 코드를 Java 코드로 변환합니다.\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"MAIN START\");\n        pay001();\n        acc001();\n        System.out.println(\"MAIN END\");\n    }\n\n    public static void pay001() {\n        // PAY001 호출 로직\n    }\n\n    public static void acc001() {\n        // ACC001 호출 로직\n    }\n}", "lang": "java", "filename": "main\\MAIN.COB"}
{"timestamp": "2025-06-19 13:09:32", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ACC001.\n\n       PROCEDURE DIVISION.\n           DISPLAY \"ACCOUNTING MODULE START\".\n           CALL 'UTIL001'.\n           DISPLAY \"ACCOUNTING MODULE END\".\n           STOP RUN.\n", "output": "// COBOL 코드를 Java 코드로 변환합니다.\npublic class ACC001 {\n    public static void main(String[] args) {\n        System.out.println(\"ACCOUNTING MODULE START\");\n        // CALL 'UTIL001'은 Java에서는 메소드 호출로 변환되어야 합니다.\n        UTIL001();\n        System.out.println(\"ACCOUNTING MODULE END\");\n    }\n\n    public static void UTIL001() {\n        // UTIL001의 구현은 여기에서 작성해야 합니다.\n    }\n}", "lang": "java", "filename": "modules\\accounting\\ACC001.COB"}
{"timestamp": "2025-06-19 13:09:33", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAY001.\n\n       PROCEDURE DIVISION.\n           DISPLAY \"PAYROLL MODULE START\".\n           CALL 'UTIL001'.\n           DISPLAY \"PAYROLL MODULE END\".\n           STOP RUN.\n", "output": "// COBOL 코드를 Java 코드로 변환합니다.\npublic class PAY001 {\n    public static void main(String[] args) {\n        System.out.println(\"PAYROLL MODULE START\");\n        UTIL001.main(null); // COBOL의 CALL 문에 해당\n        System.out.println(\"PAYROLL MODULE END\");\n    }\n}", "lang": "java", "filename": "modules\\payroll\\PAY001.COB"}
{"timestamp": "2025-06-19 13:09:34", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. UTIL001.\n\n       PROCEDURE DIVISION.\n           DISPLAY \"COMMON UTIL CALLED\".\n           STOP RUN.\n", "output": "// COBOL 코드를 Java로 변환합니다.\npublic class UTIL001 {\n    public static void main(String[] args) {\n        System.out.println(\"COMMON UTIL CALLED\");\n    }\n}", "lang": "java", "filename": "modules\\util\\UTIL001.COB"}
{"timestamp": "2025-06-19 13:11:38", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAIN.\n\n       PROCEDURE DIVISION.\n           DISPLAY \"MAIN START\".\n           CALL 'PAY001'.\n           CALL 'ACC001'.\n           DISPLAY \"MAIN END\".\n           STOP RUN.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n\ndef main():\n    print(\"MAIN START\")\n    pay001()\n    acc001()\n    print(\"MAIN END\")\n\ndef pay001():\n    pass  # PAY001의 구현이 필요합니다.\n\ndef acc001():\n    pass  # ACC001의 구현이 필요합니다.\n\nif __name__ == \"__main__\":\n    main()", "lang": "python", "filename": "main\\MAIN.COB"}
{"timestamp": "2025-06-19 13:11:39", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ACC001.\n\n       PROCEDURE DIVISION.\n           DISPLAY \"ACCOUNTING MODULE START\".\n           CALL 'UTIL001'.\n           DISPLAY \"ACCOUNTING MODULE END\".\n           STOP RUN.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n# DISPLAY는 print로 변환하고, CALL은 함수 호출로 변환합니다.\n\ndef util001():\n    pass  # 'UTIL001' 함수의 내용은 정의되어 있지 않음\n\ndef acc001():\n    print(\"ACCOUNTING MODULE START\")\n    util001()\n    print(\"ACCOUNTING MODULE END\")\n\n# 프로그램 실행\nacc001()", "lang": "python", "filename": "modules\\accounting\\ACC001.COB"}
{"timestamp": "2025-06-19 13:11:39", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAY001.\n\n       PROCEDURE DIVISION.\n           DISPLAY \"PAYROLL MODULE START\".\n           CALL 'UTIL001'.\n           DISPLAY \"PAYROLL MODULE END\".\n           STOP RUN.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n# COBOL의 DISPLAY 문은 print 문으로 변환하고,\n# CALL 문은 해당 함수 호출로 변환합니다.\n\ndef util001():\n    pass  # 'UTIL001'의 기능을 구현할 위치\n\nprint(\"PAYROLL MODULE START\")\nutil001()\nprint(\"PAYROLL MODULE END\")", "lang": "python", "filename": "modules\\payroll\\PAY001.COB"}
{"timestamp": "2025-06-19 13:11:40", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. UTIL001.\n\n       PROCEDURE DIVISION.\n           DISPLAY \"COMMON UTIL CALLED\".\n           STOP RUN.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n# COBOL의 DISPLAY 문은 Python의 print 함수로 변환됩니다.\n# STOP RUN은 Python에서는 프로그램 종료로 간주됩니다.\n\nprint(\"COMMON UTIL CALLED\")", "lang": "python", "filename": "modules\\util\\UTIL001.COB"}
{"timestamp": "2025-06-19 14:17:42", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO.\nPROCEDURE DIVISION.\n    DISPLAY 'HELLO, WORLD!'.\n    STOP RUN.", "output": "# COBOL 코드를 Python 코드로 변환합니다.\n# 아래는 변환된 Python 코드입니다.\n\nprint('HELLO, WORLD!')", "lang": "python"}
{"timestamp": "2025-06-19 14:26:21", "input": "IDENTIFICATION DIVISION.\n       PROGRAM-ID. CALCULATOR.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM1           PIC 9(5) VALUE ZEROS.\n       01 NUM2           PIC 9(5) VALUE ZEROS.\n       01 RESULT         PIC 9(6)V99 VALUE ZEROS.\n       01 OPERATOR       PIC X.\n       01 VALID-OPERATOR PIC X VALUE 'N'.\n\n       PROCEDURE DIVISION.\n       MAIN-LOGIC.\n           DISPLAY \"첫 번째 숫자를 입력하세요: \".\n           ACCEPT NUM1.\n\n           DISPLAY \"두 번째 숫자를 입력하세요: \".\n           ACCEPT NUM2.\n\n           PERFORM UNTIL VALID-OPERATOR = 'Y'\n               DISPLAY \"연산자를 입력하세요 (+, -, *, /): \".\n               ACCEPT OPERATOR\n\n               EVALUATE OPERATOR\n                   WHEN \"+\"\n                       COMPUTE RESULT = NUM1 + NUM2\n                       MOVE 'Y' TO VALID-OPERATOR\n                   WHEN \"-\"\n                       COMPUTE RESULT = NUM1 - NUM2\n                       MOVE 'Y' TO VALID-OPERATOR\n                   WHEN \"*\"\n                       COMPUTE RESULT = NUM1 * NUM2\n                       MOVE 'Y' TO VALID-OPERATOR\n                   WHEN \"/\"\n                       IF NUM2 NOT = 0\n                           COMPUTE RESULT = NUM1 / NUM2\n                           MOVE 'Y' TO VALID-OPERATOR\n                       ELSE\n                           DISPLAY \"0으로 나눌 수 없습니다. 다시 입력하세요.\"\n                       END-IF\n                   WHEN OTHER\n                       DISPLAY \"유효하지 않은 연산자입니다. 다시 입력하세요.\"\n               END-EVALUATE\n           END-PERFORM.\n\n           DISPLAY \"결과는: \" RESULT.\n\n           STOP RUN.", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nNUM1 = int(input(\"첫 번째 숫자를 입력하세요: \"))\nNUM2 = int(input(\"두 번째 숫자를 입력하세요: \"))\nRESULT = 0\nVALID_OPERATOR = 'N'\n\nwhile VALID_OPERATOR == 'N':\n    OPERATOR = input(\"연산자를 입력하세요 (+, -, *, /): \")\n\n    if OPERATOR == \"+\":\n        RESULT = NUM1 + NUM2\n        VALID_OPERATOR = 'Y'\n    elif OPERATOR == \"-\":\n        RESULT = NUM1 - NUM2\n        VALID_OPERATOR = 'Y'\n    elif OPERATOR == \"*\":\n        RESULT = NUM1 * NUM2\n        VALID_OPERATOR = 'Y'\n    elif OPERATOR == \"/\":\n        if NUM2 != 0:\n            RESULT = NUM1 / NUM2\n            VALID_OPERATOR = 'Y'\n        else:\n            print(\"0으로 나눌 수 없습니다. 다시 입력하세요.\")\n    else:\n        print(\"유효하지 않은 연산자입니다. 다시 입력하세요.\")\n\nprint(\"결과는: \", RESULT)", "lang": "python"}
{"timestamp": "2025-06-19 14:26:33", "input": "안녕", "output": "해당 입력은 COBOL 코드가 아닙니다.\nCOBOL 코드만 변환이 가능합니다.", "lang": "python"}
{"timestamp": "2025-06-19 14:26:40", "input": "안녕", "output": "해당 입력은 COBOL 코드가 아닙니다.\nCOBOL 코드만 변환이 가능합니다.", "lang": "python"}
{"timestamp": "2025-06-19 14:26:48", "input": "IDENTIFICATION DIVISION.\n       PROGRAM-ID. CALCULATOR.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM1           PIC 9(5) VALUE ZEROS.\n       01 NUM2           PIC 9(5) VALUE ZEROS.\n       01 RESULT         PIC 9(6)V99 VALUE ZEROS.\n       01 OPERATOR       PIC X.\n       01 VALID-OPERATOR PIC X VALUE 'N'.\n\n       PROCEDURE DIVISION.\n       MAIN-LOGIC.\n           DISPLAY \"첫 번째 숫자를 입력하세요: \".\n           ACCEPT NUM1.\n\n           DISPLAY \"두 번째 숫자를 입력하세요: \".\n           ACCEPT NUM2.\n\n           PERFORM UNTIL VALID-OPERATOR = 'Y'\n               DISPLAY \"연산자를 입력하세요 (+, -, *, /): \".\n               ACCEPT OPERATOR\n\n               EVALUATE OPERATOR\n                   WHEN \"+\"\n                       COMPUTE RESULT = NUM1 + NUM2\n                       MOVE 'Y' TO VALID-OPERATOR\n                   WHEN \"-\"\n                       COMPUTE RESULT = NUM1 - NUM2\n                       MOVE 'Y' TO VALID-OPERATOR\n                   WHEN \"*\"\n                       COMPUTE RESULT = NUM1 * NUM2\n                       MOVE 'Y' TO VALID-OPERATOR\n                   WHEN \"/\"\n                       IF NUM2 NOT = 0\n                           COMPUTE RESULT = NUM1 / NUM2\n                           MOVE 'Y' TO VALID-OPERATOR\n                       ELSE\n                           DISPLAY \"0으로 나눌 수 없습니다. 다시 입력하세요.\"\n                       END-IF\n                   WHEN OTHER\n                       DISPLAY \"유효하지 않은 연산자입니다. 다시 입력하세요.\"\n               END-EVALUATE\n           END-PERFORM.\n\n           DISPLAY \"결과는: \" RESULT.\n\n           STOP RUN.", "output": "# COBOL 코드를 Python 코드로 변환합니다.\n\nNUM1 = int(input(\"첫 번째 숫자를 입력하세요: \"))\nNUM2 = int(input(\"두 번째 숫자를 입력하세요: \"))\nRESULT = 0\nVALID_OPERATOR = 'N'\n\nwhile VALID_OPERATOR != 'Y':\n    OPERATOR = input(\"연산자를 입력하세요 (+, -, *, /): \")\n    \n    if OPERATOR == \"+\":\n        RESULT = NUM1 + NUM2\n        VALID_OPERATOR = 'Y'\n    elif OPERATOR == \"-\":\n        RESULT = NUM1 - NUM2\n        VALID_OPERATOR = 'Y'\n    elif OPERATOR == \"*\":\n        RESULT = NUM1 * NUM2\n        VALID_OPERATOR = 'Y'\n    elif OPERATOR == \"/\":\n        if NUM2 != 0:\n            RESULT = NUM1 / NUM2\n            VALID_OPERATOR = 'Y'\n        else:\n            print(\"0으로 나눌 수 없습니다. 다시 입력하세요.\")\n    else:\n        print(\"유효하지 않은 연산자입니다. 다시 입력하세요.\")\n\nprint(\"결과는:\", RESULT)", "lang": "python"}
{"timestamp": "2025-06-19 14:27:33", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN8.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 8 * I\n               DISPLAY \"8 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN8.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 8 * I\n    print(\"8 *\", I, \"=\", RESULT)\n    I += 1", "lang": "python", "filename": "DAN8.cob"}
{"timestamp": "2025-06-19 14:31:59", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN8.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 8 * I\n               DISPLAY \"8 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN8.\n", "output": "// Java 프로그램을 작성합니다. \n// COBOL 프로그램의 로직을 그대로 구현합니다.\npublic class DAN8 {\n    public static void main(String[] args) {\n        int I = 1; // 초기값 설정\n        int RESULT; // 결과 변수\n\n        // I가 9보다 작거나 같은 동안 반복\n        while (I <= 9) {\n            RESULT = 8 * I; // 계산\n            System.out.println(\"8 * \" + I + \" = \" + RESULT); // 결과 출력\n            I++; // I의 값 1 증가\n        }\n    }\n}", "lang": "java", "filename": "DAN8.cob"}
{"timestamp": "2025-06-19 14:32:23", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN5.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 5 * I\n               DISPLAY \"5 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN5.\n", "output": "# COBOL 프로그램을 Python 코드로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 5 * I\n    print(f\"5 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "DAN5.cob"}
{"timestamp": "2025-06-19 14:32:28", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN5.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 5 * I\n               DISPLAY \"5 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN5.\n", "output": "// COBOL 코드를 Java 코드로 변환합니다.\npublic class DAN5 {\n    public static void main(String[] args) {\n        int i = 1; // 초기값 설정\n        int result; // 결과 변수 선언\n\n        // 반복문 실행\n        while (i <= 9) {\n            result = 5 * i; // 계산\n            System.out.println(\"5 * \" + i + \" = \" + result); // 결과 출력\n            i++; // i 값 증가\n        }\n    }\n}", "lang": "java", "filename": "DAN5.cob"}
{"timestamp": "2025-06-19 14:35:15", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN2.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 2 * I\n               DISPLAY \"2 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN2.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n# I와 RESULT 변수를 정의하고, 반복문을 사용하여 계산 및 출력합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 2 * I\n    print(f\"2 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN2.cob"}
{"timestamp": "2025-06-19 14:35:16", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN3.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 3 * I\n               DISPLAY \"3 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN3.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\nI = 1\nwhile I <= 9:\n    RESULT = 3 * I\n    print(f\"3 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN3.cob"}
{"timestamp": "2025-06-19 14:35:17", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN4.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 4 * I\n               DISPLAY \"4 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN4.\n", "output": "# COBOL 프로그램을 Python 코드로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 4 * I\n    print(f\"4 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN4.cob"}
{"timestamp": "2025-06-19 14:35:17", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN5.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 5 * I\n               DISPLAY \"5 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN5.\n", "output": "# COBOL 프로그램을 Python 코드로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 5 * I\n    print(f\"5 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN5.cob"}
{"timestamp": "2025-06-19 14:35:18", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN6.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 6 * I\n               DISPLAY \"6 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN6.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\nI = 1\nRESULT = 0\n\nwhile I <= 9:\n    RESULT = 6 * I\n    print(f\"6 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN6.cob"}
{"timestamp": "2025-06-19 14:35:19", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN7.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 7 * I\n               DISPLAY \"7 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN7.\n", "output": "# COBOL 코드 변환 결과입니다.\nI = 1\nRESULT = 0\n\nwhile I <= 9:\n    RESULT = 7 * I\n    print(f\"7 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN7.cob"}
{"timestamp": "2025-06-19 14:35:20", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN8.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 8 * I\n               DISPLAY \"8 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN8.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n# 변환된 코드는 아래와 같습니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 8 * I\n    print(f\"8 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN8.cob"}
{"timestamp": "2025-06-19 14:35:21", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DAN9.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 9 VALUE 1.\n       01 RESULT   PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM UNTIL I > 9\n               COMPUTE RESULT = 9 * I\n               DISPLAY \"9 * \" I \" = \" RESULT\n               ADD 1 TO I\n           END-PERFORM\n           GOBACK.\n       END PROGRAM DAN9.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 9 * I\n    print(f\"9 * {I} = {RESULT}\")\n    I += 1", "lang": "python", "filename": "test-a\\DAN9.cob"}
{"timestamp": "2025-06-19 14:35:21", "input": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAIN.\n\n       PROCEDURE DIVISION.\n           CALL 'DAN2'\n           CALL 'DAN3'\n           CALL 'DAN4'\n           CALL 'DAN5'\n           CALL 'DAN6'\n           CALL 'DAN7'\n           CALL 'DAN8'\n           CALL 'DAN9'\n           STOP RUN.\n       END PROGRAM MAIN.\n", "output": "# COBOL 코드를 Python으로 변환합니다.\ndef main():\n    # 여러 함수 호출\n    dan2()\n    dan3()\n    dan4()\n    dan5()\n    dan6()\n    dan7()\n    dan8()\n    dan9()\n    \n# 프로그램 시작\nif __name__ == \"__main__\":\n    main()", "lang": "python", "filename": "test-b\\MAIN.cob"}
{"timestamp": "2025-06-19 14:46:38", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. MAIN.\n\nPROCEDURE DIVISION.\n    CALL 'DAN2'\n    CALL 'DAN3'\n    CALL 'DAN4'\n    CALL 'DAN5'\n    CALL 'DAN6'\n    CALL 'DAN7'\n    CALL 'DAN8'\n    CALL 'DAN9'\n    STOP RUN.\nEND PROGRAM MAIN.", "output": "// Java 코드로 변환된 내용입니다.\npublic class Main {\n    public static void main(String[] args) {\n        // 각 서브프로그램 호출\n        dan2();\n        dan3();\n        dan4();\n        dan5();\n        dan6();\n        dan7();\n        dan8();\n        dan9();\n    }\n\n    // 각 서브프로그램의 구현은 여기에 추가됩니다.\n    public static void dan2() {\n        // 구현 내용\n    }\n\n    public static void dan3() {\n        // 구현 내용\n    }\n\n    public static void dan4() {\n        // 구현 내용\n    }\n\n    public static void dan5() {\n        // 구현 내용\n    }\n\n    public static void dan6() {\n        // 구현 내용\n    }\n\n    public static void dan7() {\n        // 구현 내용\n    }\n\n    public static void dan8() {\n        // 구현 내용\n    }\n\n    public static void dan9() {\n        // 구현 내용\n    }\n}", "lang": "java"}
{"timestamp": "2025-06-19 15:15:53", "input": "public class PAY001 {\n    public static void main(String[] args) {\n        System.out.println(\"PAYROLL MODULE START\");\n        UTIL001.main(null); // COBOL의 CALL 문에 해당\n        System.out.println(\"PAYROLL MODULE END\");\n    }\n}", "output": "해당 입력은 COBOL 코드가 아닙니다.\nCOBOL 코드만 변환이 가능합니다.", "lang": "python"}
{"timestamp": "2025-06-19 15:16:30", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. DAN6.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I        PIC 9 VALUE 1.\n01 RESULT   PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM UNTIL I > 9\n        COMPUTE RESULT = 6 * I\n        DISPLAY \"6 * \" I \" = \" RESULT\n        ADD 1 TO I\n    END-PERFORM\n    GOBACK.\nEND PROGRAM DAN6.", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 6 * I\n    print(f\"6 * {I} = {RESULT}\")\n    I += 1", "lang": "python"}
{"timestamp": "2025-06-19 15:17:07", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. DAN7.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I        PIC 9 VALUE 1.\n01 RESULT   PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM UNTIL I > 9\n        COMPUTE RESULT = 7 * I\n        DISPLAY \"7 * \" I \" = \" RESULT\n        ADD 1 TO I\n    END-PERFORM\n    GOBACK.\nEND PROGRAM DAN7.", "output": "# COBOL 코드를 Python으로 변환합니다.\nI = 1\nwhile I <= 9:\n    RESULT = 7 * I\n    print(f\"7 * {I} = {RESULT}\")\n    I += 1", "lang": "python"}
{"timestamp": "2025-06-19 15:26:37", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. DAN3.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I        PIC 9 VALUE 1.\n01 RESULT   PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM UNTIL I > 9\n        COMPUTE RESULT = 3 * I\n        DISPLAY \"3 * \" I \" = \" RESULT\n        ADD 1 TO I\n    END-PERFORM\n    GOBACK.\nEND PROGRAM DAN3.", "output": "# COBOL 코드를 Python 코드로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 3 * I\n    print(f\"3 * {I} = {RESULT}\")\n    I += 1", "lang": "python"}
{"timestamp": "2025-06-19 15:27:39", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. DAN3.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I        PIC 9 VALUE 1.\n01 RESULT   PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM UNTIL I > 9\n        COMPUTE RESULT = 2 * I\n        DISPLAY \"2 * \" I \" = \" RESULT\n        ADD 1 TO I\n    END-PERFORM\n    GOBACK.\nEND PROGRAM DAN3.", "output": "# COBOL 코드를 Python으로 변환합니다.\n\nI = 1\nwhile I <= 9:\n    RESULT = 2 * I\n    print(f\"2 * {I} = {RESULT}\")\n    I += 1", "lang": "python"}
{"timestamp": "2025-06-19 15:32:33", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. DAN7.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I        PIC 9 VALUE 1.\n01 RESULT   PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM UNTIL I > 9\n        COMPUTE RESULT = 9 * I\n        DISPLAY \"9 * \" I \" = \" RESULT\n        ADD 1 TO I\n    END-PERFORM\n    GOBACK.\nEND PROGRAM DAN7.", "output": "# COBOL 코드를 Python으로 변환합니다.\nI = 1\nwhile I <= 9:\n    RESULT = 9 * I\n    print(\"9 *\", I, \"=\", RESULT)\n    I += 1", "lang": "python"}
{"timestamp": "2025-06-19 15:33:07", "input": "IDENTIFICATION DIVISION.\nPROGRAM-ID. DAN9.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 I        PIC 9 VALUE 1.\n01 RESULT   PIC 99.\n\nPROCEDURE DIVISION.\n    PERFORM UNTIL I > 9\n        COMPUTE RESULT = 9 * I\n        DISPLAY \"9 * \" I \" = \" RESULT\n        ADD 1 TO I\n    END-PERFORM\n    GOBACK.\nEND PROGRAM DAN9.", "output": "# COBOL 코드를 Python으로 변환합니다.\n# 주의: COBOL의 DISPLAY 문은 Python의 print 함수로 변환됩니다.\n\nI = 1\nRESULT = 0\n\nwhile I <= 9:\n    RESULT = 9 * I\n    print(\"9 *\", I, \"=\", RESULT)\n    I += 1", "lang": "python"}
